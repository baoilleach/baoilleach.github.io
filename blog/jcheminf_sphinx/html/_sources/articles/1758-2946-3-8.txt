Confab - Systematic generation of diverse low-energy conformers
===============================================================

Abstract
********

Background
^^^^^^^^^^

Many computational chemistry analyses require the generation of conformers, either on-the-fly, or in advance. We present Confab, an open source command-line application for the systematic generation of low-energy conformers according to a diversity criterion.

Results
^^^^^^^

Confab generates conformations using the 'torsion driving approach' which involves iterating systematically through a set of allowed torsion angles for each rotatable bond. Energy is assessed using the MMFF94 forcefield. Diversity is measured using the heavy-atom root-mean-square deviation (RMSD) relative to conformers already stored. We investigated the recovery of crystal structures for a dataset of 1000 ligands from the Protein Data Bank with fewer than 1 million conformations. Confab can recover 97% of the molecules to within 1.5 \ |nonascii_1|\  at a diversity level of 1.5 \ |nonascii_2|\  and an energy cutoff of 50 kcal/mol.

Conclusions
^^^^^^^^^^^

Confab is available from `<http://confab.googlecode.com>`_.

Introduction
************

The generation of molecular conformations is an essential part of many computational analyses in chemistry, particularly in the field of computational drug design. Methods such as 3D QSAR, protein-ligand docking and pharmacophore generation and searching \ [#B1]_ all require the generation of conformers, whether on-the-fly (as part of the method) or pre-generated by a stand-alone conformer generator. In contrast to 3D structure generators (such as CORINA \ [#B2]_, DG-AMMOS \ [#B3]_ and smi23d \ [#B4]_), which focus on the generation of a single low-energy conformation, conformation generators create an ensemble of conformers that cover the entire space of low-energy conformations or that part of conformational space occupied by biologically-relevant conformers.

Several proprietary conformation generators are currently available (including OMEGA \ [#B5]_, ROTATE \ [#B6]_, Catalyst \ [#B7]_, Confort \ [#B8]_, ConfGen \ [#B9]_, Balloon \ [#B10]_ and MED-3DMC \ [#B11]_ among others) but only recently have open source conformation generators appeared: Frog2 \ [#B12]_ generates conformers using a Monte Carlo approach, while Multiconf-DOCK \ [#B13]_ adapts the systematic search code from DOCK5 \ [#B14]_ to generate diverse conformers via a torsion-driving approach.

Confab 1.0 is the first release of Confab, an open source conformation generator whose goal is the systematic coverage of conformational space. Accuracy has been favoured over the introduction of approximations to improve performance. The algorithm starts with an input 3D structure which, after some initialisation steps, is used to generate multiple conformers which are filtered on-the-fly to identify diverse low energy conformers. Conformations are generated using the torsion-driving approach from a set of predefined allowed torsion angles. Ring conformations are not currently sampled.

The first section of the paper describes the algorithm used by the software and some implementation details. After this, two applications of the software are described: an analysis of the conformational space of a dataset of 1000 molecules (which includes a comparison to Multiconf-DOCK), and an investigation of the conformational preferences of a particular phenyl sulfone.

Methods
*******

Algorithm
^^^^^^^^^

The Confab algorithm is outlined in Figure \ :ref:`1<figure_1>`. The input required is a 3D structure with reasonable bond lengths and angles. Since the algorithm does not currently explore ring conformations, any rings present should be in reasonable conformations.

.. _figure_1:

.. figure:: ../_static/1758-2946-3-8-1.jpg
   :align: center

   Figure 1. Flowchart depicting the Confab algorithm

   **Flowchart depicting the Confab algorithm**.


The first step of the algorithm is the identification of rotatable bonds. These are defined as all acyclic single bonds where both atoms of the bond are connected to at least two non-hydrogen atoms, but neither atom of the bond is sp-hybridised. Note that this definition excludes rotation around bonds that interchange hydrogens (for example, the rotation of the hydrogens of a methyl group), but this does not imply any loss of accuracy as it is usual practice to exclude hydrogens when calculating the RMSD (see below).

The method used by Confab to generate conformations is known as the torsion-driving approach. A set of allowed torsion angles for each rotatable bond is assigned to each bond by searching for a match to predefined SMARTS strings in a user-configurable file (torlib.txt) included in the Confab distribution. This file is part of the Open Babel project and it assigns values to particular rotatable bonds using data from Huang et al. \ [#B15]_.

Once the allowed torsion angles are assigned, they are corrected for topological (that is, graph) symmetry. The presence of such symmetry allows performance to be improved by eliminating redundant evaluations, thus reducing the number of conformations that will be tested. 2-fold symmetry is identified when a rotatable bond involves an sp\ :sup:`2`\  hybridised carbon atom where the neighbouring two atoms affected by the rotation are both of the same symmetry class. When this occurs the allowed values of that torsion are halved by restricting them to those less than 180\ |nonascii_3|\ . The same is done for the case of 3-fold symmetry at an sp\ :sup:`3`\  hybridised carbon where the three neighbours are of the same symmetry class; in this case the torsion angles are restricted to those less than 120\ |nonascii_4|\ . If graph symmetry is identified at both ends of a rotatable bond, the result is multiplicative; a 2-fold and a 3-fold symmetry combine to restrict allowed values of the torsion angles to 360/6 = 60\ |nonascii_5|\ .

The next step is to obtain an estimate of the energy of the most stable conformer. Throughout Confab, energies are calculated using the MMFF94 forcefield \ [#B16]_. The values of the bond stretching, angle bend, stretch bend and out-of-plane bending terms are constant for all conformers of the same molecule; only the torsion, Van der Waals and electrostatic terms were repeatedly evaluated. A low energy conformer is found using a simple greedy algorithm. Each torsion angle is optimised starting with the most central torsion and proceeding outwards. As this procedure is relatively fast (compared to the combinatorial problem of searching for the global optimum) it is repeated up to 16 times by testing the four most central torsions in different orders. The lowest energy conformer found is used as a reference point for applying an energy cutoff during the conformer search. If, during the actual conformer generation a lower energy conformer is found, this lower energy is used instead for the reference from that point on.

The main part of the algorithm is the systematic generation and assessment of all conformers described by the allowed torsion angles. Confab generates each of these in turn up to a user-specified cutoff (the default is 10\ :sup:`6`\ ) and determines its energy relative to the lowest energy conformer found so far. If this is within a user-specified energy cutoff (50 kcal/mol by default), it is assessed for diversity to the conformers already stored (see below). If it is found to be diverse, it is itself stored otherwise it is discarded. The algorithm then moves onto the next conformer.

Rather than iterate in a 'depth-first' manner over the torsions and their allowed angles, Confab uses a Linear Feedback Shift Register (LFSR) to iterate in a random order over all of the conformers. A LFSR allows the generation of all integers from 1 to N pseudorandomly without repetition and without any memory overhead (which is important for large values of N). By iterating randomly, Confab avoids biasing generated conformers towards a particular region of conformational space, for example towards the input conformation. It also helps increase diversity if the number of possible conformations is greater than the cutoff for the number tested.

Diversity is ensured by calculating the heavy-atom RMSD (after least-squares alignment) of the newly generated conformation to those previously stored. The alignment is carried out using the QCP algorithm of Theobald \ [#B17]_ (which we found to be about twice as fast as the popular Kabsch alignment method \ [#B18]_). Despite this, when a molecule has many conformers and a large number of conformers have been stored, full pairwise RMSD calculations take an excessive amount of time. To minimise the number of RMSD evaluations required to discard a conformer, chosen conformers are stored in a tree structure that effectively clusters conformers on-the-fly by RMSD. Figure \ :ref:`2(a)<figure_2(a)>` shows a typical 'diversity tree' where each level of the tree is associated with a smaller RMSD diversity from 3.0 \ |nonascii_6|\  down to the cutoff specified by the user (1.6 \ |nonascii_7|\  in the figure). Each node of the tree represents a stored conformation. Sibling nodes (that is, nodes at the same level that share the same parent node) differ by at least the RMSD diversity associated with that level. Note that sibling nodes are ordered and that the first child node of each parent is the same as the parent itself.

.. _figure_2:

.. figure:: ../_static/1758-2946-3-8-2.jpg
   :align: center

   Figure 2. An example diversity tree used to filter conformations on-the-fly

   **An example diversity tree used to filter conformations on-the-fly**. (a) A diversity tree containing five conformations (A to E) used to filter conformations with an RMSD of less than 1.6 \ |nonascii_8|\  to one of the stored conformations. (b) The same diversity tree after addition of conformer H, where H is within 3.0 \ |nonascii_9|\  of A but not within 2.0 \ |nonascii_10|\  of A, C or D.


To illustrate the algorithm, let us imagine adding a new conformation H to the tree depicted in Figure \ :ref:`2(a)<figure_2(a)>`. The algorithm starts at the top of the tree and determines which of the two branches (A or B) to take at the 3.0 \ |nonascii_11|\  diversity level. To do so it checks whether H is within 3.0 \ |nonascii_12|\  RMSD of A. If so, it follows the tree down to the next level, and checks to see whether it is within 2.0 \ |nonascii_13|\  RMSD of A (note that it does not need to recalculate the RMSD to do this). If this is not true, then it checks for 2.0 \ |nonascii_14|\  similarity to C. If so, it follows C down to the next level; otherwise it checks against D. If it is not similar to D, H is stored in the tree as the next sibling at that level of the tree (this is depicted in Figure \ :ref:`2(b)<figure_2(b)>`). When adding a new node for a conformation at a particular level, if the level is not at the bottom then child nodes containing that conformation are added at successively lower levels until the bottom level is reached. Overall, there are two possibilities; either the algorithm reaches the bottom level and finds that the new conformation is within the RMSD cutoff of an existing conformer, in which case it is discarded, or else it is of sufficient diversity to be stored at some level of the tree.

This algorithm greatly reduces the number of RMSD evaluations during the conformer generation loop. However it does not eliminate all conformations that are similar to those already stored; conformations may be retained that differ by less than the RMSD cutoff if they end up in different branches. To prune the set of retained conformations, while still avoiding a computationally expensive pairwise RMSD calculation, all of the retained conformations are added one-by-one to a new tree in order of increasing energy. This time the algorithm used for adding conformations to the diversity tree is more robust: all sibling conformations are tested for similarity, even after finding one that is similar. The result is that the same conformation may be added at several different points in the tree. This makes the tree more effective at eliminating similar conformations at the expense of a greater number of RMSD calculations.

Calculation of an RMSD can be overestimated when a molecule's structure has automorphisms (a permutation of the atoms of a molecule that preserves the bond connections). For example, if you consider a para-substituted phenyl ring where two conformations differ by a rotation of 180\ |nonascii_15|\  around the substituted carbons, it is clear that the calculated RMSD between the conformations should be 0. However, if the symmetry of the phenyl ring is not taken into account this will not be the case and the RMSD will be overestimated as the corresponding atoms of the two structures have moved. The symmetry-corrected RMSD is obtained by iterating over the automorphisms of the molecule and taking the minimum value of the resulting RMSDs. For performance reasons, the calculation of the RMSD is not symmetry-corrected during the main conformation generation loop. However it is used afterwards when building the final diversity tree, thereby eliminating any conformations that were retained in error.

Implementation
^^^^^^^^^^^^^^

Confab is essentially a modified version of Open Babel \ [#B19]_, a widely-used cheminformatics toolkit written in C++ and available under the open source GPL v2 licence \ [#B20]_. In fact, some of the code written for Confab has been merged into the main Open Babel distribution (such as the original Kabsch alignment code) but due to an additional dependency (on tree.hh, see below) the core code has not been included in Open Babel v2.3.

The MMFF94 forcefield, the conformer generation framework and the automorphism detection are all provided by Open Babel. QCP alignment was implemented using Theobald's public domain code \ [#B21]_ in combination with the Eigen2 high performance linear algebra library \ [#B22]_. The diversity analysis code relies on a tree data structure provided by the Open Source tree.hh library \ [#B23]_. The code used to implement the Linear Feedback Shift Register (LFSR) was adapted from its corresponding Wikipedia article \ [#B24]_. Tap values for the register were taken from Alfke's Xilinx application note \ [#B25]_.

The Confab distribution contains two command-line applications: *confab* and *calcrmsd*. The former implements the Confab algorithm to generate conformers given an input 3D structure, while the latter may be used to assess the performance of *confab* by comparing the generated conformers to a file containing crystal structures. Full details of these applications are available on the Confab website.

Coverage of Conformational Space
********************************

Dataset
^^^^^^^

To illustrate the performance of Confab, we used a dataset of 1000 small molecule crystal structures derived from that of Borodina et al. \ [#B26]_. The original source is the PDB; thus this dataset represents bioactive conformations of molecules. The 3D structures of the 14504 ligands in the Borodina dataset were obtained using the PubChem Download Service (using the PubChem Substance IDs from Borodina et al.). Of these, 16 could not be handled by the MMFF94 forcefield, 5202 had no rotatable bonds (this fraction included a large number of trivial salts) and 2348 had more than 1 million conformers (according to Confab's torsion rules). 1000 structures were randomly chosen from the 6938 remaining. See Additional file 

Additional file 1

**Crystal structures used to test conformational coverage**. This is a text file in SDF format containing biological conformations (as downloaded from PubChem) of 1000 molecules. This is a subset of the data used in the study by Borodina et al.

Click here for file

To avoid bias towards the crystal structures, the input conformations for Confab were generated by building the 3D structure using Open Babel. After the initial structure generation, the structures were optimised using the MMFF94 forcefield (200 steps steepest descent). Since Confab does not explore ring conformations, ring conformations were taken from the crystal structure for the initial structure generation. See Additional file 

Additional file 2

**Generated 3D structures used to test conformational coverage**. This is a text file in SDF format containing 3D structures of the 1000 molecules in the dataset generated using Open Babel. These were used as the input to Confab.

Click here for file

Results
^^^^^^^

Figure \ :ref:`3(b)<figure_3(b)>` shows an overview of the dataset of 1000 structures in terms of the number of rotatable bonds in each molecule. Although the dataset contains molecules with up to 12 rotatable bonds, it is clear by comparison with the full dataset of Borodina et al. in Figure \ :ref:`3(a)<figure_3(a)>` that the reduced dataset is only a representative sample for molecules having up to 7 rotatable bonds. Beyond this, the restriction that the molecule must have fewer than 1 million conformers leads to the elimination of most of the molecules. For this reason, to avoid erroneous conclusions some of the following analyses (where stated) will not consider molecules having 8 or more rotatable bonds.

.. _figure_3:

.. figure:: ../_static/1758-2946-3-8-3.jpg
   :align: center

   Figure 3. The distribution of molecules in terms of the number of rotatable bonds in (a) the dataset of Borodina et al., and (b) our dataset of 1000 molecules

   **The distribution of molecules in terms of the number of rotatable bonds in (a) the dataset of Borodina et al., and (b) our dataset of 1000 molecules**.


Confab was used to exhaustively generate all low energy conformers for each molecule in the dataset for diversity values ranging from 0.4 \ |nonascii_16|\  to 3.0 \ |nonascii_17|\  RMSD. The default setting of 50 kcal/mol was used as an energy cutoff. The default value of 1 million conformers was used as the conformer cutoff; this ensured exhaustive coverage of conformational space (as defined by Confab's torsion rules) as structures with more conformers were not included in the dataset (see above). Figure \ :ref:`4<figure_4>` shows the mean time for conformer generation per molecule. This is largely independent of the diversity level for diversity levels greater than or equal to 1.0 \ |nonascii_18|\ . For values less than this, an increasing amount of time is spent performing the pairwise RMSD calculations against stored conformations.

.. _figure_4:

.. figure:: ../_static/1758-2946-3-8-4.jpg
   :align: center

   Figure 4. Effect of diversity level on speed of conformer generation

   **Effect of diversity level on speed of conformer generation**. Times were measured on an Intel Xeon E5620 Processor (2.4GHz, 4C) with 32GB RAM.


Performance of conformer generators is typically measured by the percent recovery of crystal structures with respect to a particular RMSD cutoff (see for example Ref \ [#B9]_). This is simply the percentage of molecules which have a generated conformer within a particular RMSD of the crystal structure. Commonly used values for this RMSD cutoff are 2.0, 1.5 and 1.0 \ |nonascii_19|\ .

Figure \ :ref:`5(a)<figure_5(a)>` shows the percent recovery at these cutoffs for different values of the RMSD diversity. At 2.0 \ |nonascii_20|\  RMSD diversity, 99% are within 2.0 \ |nonascii_21|\  RMSD of the crystal (83% within 1.5, 41% within 1.0); at 1.5 \ |nonascii_22|\  RMSD diversity, 99% are within 2.0 \ |nonascii_23|\  (97% within 1.5, 50% within 1.0); at 1.0 \ |nonascii_24|\  RMSD diversity, 99% are within 2.0 \ |nonascii_25|\  RMSD (98% within 1.5, 89% within 1.0). As expected, the percentage of crystal structures that are found decreases as the RMSD diversity increases. In particular, the curves fall off steeply once the RMSD diversity is greater than the required cutoff.

.. _figure_5:

.. figure:: ../_static/1758-2946-3-8-5.jpg
   :align: center

   Figure 5. Performance measured as % recovery of crystal structures

   **Performance measured as % recovery of crystal structures**. (a) Performance for different RMSD cutoffs. The diversity cutoff is where the value of the RMSD diversity is used as the RMSD cutoff. (b) The RMSD cutoff required to achieve a particular level of % recovery. The diagonal line indicates the maximum RMSD cutoff expected when there is complete coverage.


An interesting question to ask is what RMSD diversity is required to recover X% of crystal structures with respect to a particular RMSD cutoff? Figure \ :ref:`5(b)<figure_5(b)>` shows the answer to this where X is 90%, 95% or 98%. For example to find 95% of the crystal structures within a 2.0 \ |nonascii_26|\  cutoff an RMSD diversity of 2.4 \ |nonascii_27|\  (or smaller) is required, but to find the same percentage to within 1.5 \ |nonascii_28|\  an RMSD diversity of 1.6 \ |nonascii_29|\  is needed. However, even an RMSD diversity of 0.4 \ |nonascii_30|\  will not recover 98% of the structures to within 1.0 \ |nonascii_31|\  (it only recovers 96%), an indication of the inherent diversity of the generated conformers as discussed further below.

As pointed out by Borodina et al. \ [#B26]_, if the conformational space is perfectly covered and lacks any 'holes' then the RMSD diversity is an upper bound of the minimum RMSD to the crystal structure. In other words, at an RMSD diversity of 1.5 \ |nonascii_32|\  for example, all crystal structures should be found to within 1.5 \ |nonascii_33|\ . The diagonal line in Figure \ :ref:`5(b)<figure_5(b)>` indicates the maximum RMSD cutoff expected if this ideal behaviour is observed. It is clear from the figure that at low RMSD diversity the actual performance is poorer than this.

There are two main problems that give rise to gaps in conformational coverage. The first is that the allowed torsion values may not encompass the specific torsion angle observed in the crystal structure. For this dataset, there are 7 molecules for which the crystal structure could not be found within 2.0 \ |nonascii_34|\  even at 0.4 \ |nonascii_35|\  RMSD diversity. These molecules (PubChem substance IDs of 584680, 823881, 825747, 826196, 828032, 830919 and 834618), of which two represent different conformations of the same molecule, all involve sugar moieties and it may be that the allowed torsion angles of the glycosidic bond are too conservative.

The second is that the granularity of the allowed torsion settings may not be sufficiently fine to allow solutions to be found to within a low RMSD cutoff. For example, a carbon-carbon single bond has 12 allowed torsion values from 0 to 360\ |nonascii_36|\  in increments of 30\ |nonascii_37|\ . If such a bond is centrally located in a large molecule, even if the crystal structure has similar torsion angles to one of these conformers the RMSD may differ significantly.

Based on this dataset, the inherent granularity of the Confab generated conformers is around 1.4 \ |nonascii_38|\ , as indicated by the "Diversity Cutoff" line in Figure \ :ref:`5(a)<figure_5(a)>` which falls off sharply as the RMSD diversity decreases below 1.4 \ |nonascii_39|\ . This line indicates the percent recovery at different levels of RMSD diversity when the RMSD cutoff used is the same as the diversity level. The sharp fall off below 1.4 \ |nonascii_40|\  is a deviation from the ideal behaviour described by Borodina et al.

Table \ :ref:`1<table_1>` shows the median number of generated conformers tested for molecules with different numbers of rotatable bonds. Broadly speaking, about one third of the conformers pass the energy cutoff applied. Although the size of each individual subset is not very large, and the values for 6 rotatable bonds seem to be biased towards a larger number of conformers, some general points can still be made.

The number of diverse conformers is much reduced by a higher diversity level. For example, for those molecules with 7 rotatable bonds there are approximately 11000 low energy conformers of which about 13% are diverse at 0.5 \ |nonascii_41|\  RMSD, only 1.3% are diverse at 1.0 \ |nonascii_42|\  RMSD, and only 0.16% are diverse at 1.5 \ |nonascii_43|\  RMSD.

The values in Table \ :ref:`1<table_1>` are in broad agreement with those reported by Smellie et al. \ [#B27]_ for a representative subset of their dataset (see table three therein). They make the point that the number of conformers required to cover conformational space is really surprisingly low. For a molecule with 7 rotatable bonds in our dataset, conformational space can be covered to within 1.0 \ |nonascii_44|\  with merely hundreds of conformations while just tens of conformations will achieve a coverage of 1.5 \ |nonascii_45|\ . Of course, these figures are expected to increase with each additional rotatable bond.

For completeness, Table \ :ref:`1<table_1>` also reports median values for the minimum RMSD to the crystal structure. However, as a metric for coverage these values give a misleadingly positive picture compared to the percent recovery values discussed above.

Comparison with Multiconf-DOCK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Multiconf-DOCK \ [#B13]_ is another open source conformer generator that uses a torsion driving approach to implement a systematic search to identify diverse low energy conformers. This software differs in that it uses the AMBER force field \ [#B28]_\ [#B29]_ (as implemented in DOCK5) instead of MMFF94. In addition, it implements performance improvements such as search tree pruning by partial energy estimation \ [#B14]_. Like Confab, the software requires a 3D structure as input.

Multiconf-DOCK was used to generate conformations for the 1000 structures in the dataset using the same input as for Confab but converted to MOL2 using Open Babel v2.3.0. It should be noted that the specified Sybyl atom types in the input MOL2 file have an effect on the conformations generated by Multiconf-DOCK. The parameters used were taken from the example provided with the Multiconf-DOCK distribution, except that no restriction was placed on the number of generated conformations and the energy cutoff was set to 50 kcal/mol (as used for Confab). Three different RMSD diversity levels were investigated: 2.0 \ |nonascii_46|\ , 1.5 \ |nonascii_47|\  and 1.0 \ |nonascii_48|\ . For all three diversity levels, the mean time spent per molecule was 6.3 s (measured on the same machine used for Figure \ :ref:`4<figure_4>`).

The performance in terms of percent recovery is as follows: at 2.0 \ |nonascii_49|\  RMSD diversity, 99% are within 2.0 \ |nonascii_50|\  RMSD of the crystal structure (89% within 1.5, 55% within 1.0); at 1.5 \ |nonascii_51|\  RMSD diversity, 99% are within 2.0 \ |nonascii_52|\  (97% within 1.5, 64% within 1.0); at 1.0 \ |nonascii_53|\  RMSD diversity, 99% are within 2.0 \ |nonascii_54|\  (98% within 1.5, 80% within 1.0). These values are broadly similar to those for Confab (see above). The most noticeable differences occur for the percentage of structures found to within 1.0 \ |nonascii_55|\  RMSD; assuming that both programs successfully remove conformations that are within the diversity cutoff, Multiconf-DOCK outperforms Confab at the 2.0 \ |nonascii_56|\  and 1.5 \ |nonascii_57|\  RMSD diversity levels but Confab performs better at 1.0 \ |nonascii_58|\  RMSD diversity.

Table \ :ref:`2<table_2>` shows the median number of conformers generated by Multiconf-DOCK, along with the minimum RMSD to the crystal structure, broken down by the number of rotatable bonds. Compared to Confab the number of conformers generated is far fewer. It is difficult to say whether this represents a less comprehensive coverage of conformational space or whether this is due to the use of different forcefields. In terms of the minimum RMSD to the crystal structure, once again we see that Multiconf-DOCK performs better than Confab at the 2.0 \ |nonascii_59|\  and 1.5 \ |nonascii_60|\  RMSD diversity levels but Confab is better at 1.0 \ |nonascii_61|\  RMSD diversity.

Distance Distribution in Conformations of a Phenyl Sulfone
**********************************************************

Many conformer generators are focused on reproducing bioactive conformations. However it is worth remembering that the generation of conformers may also be useful in other contexts. Here we use Confab to as an aid to interpret the NMR spectra for the phenyl sulfone shown in Figure \ :ref:`6<figure_6>`. The peak for the methylene carbon of the ethyl ester was split unexpectedly (compared to an analogous sulfone where the phenyl group was replaced by tert-butyl), and our hypothesis was that this was due to the close approach of the methylene carbon to one of the sulfonyl oxygens in solution. Confab was used to investigate whether low energy conformations existed where the methylene group was in close proximity to a sulfonyl oxygen.

.. _figure_6:

.. figure:: ../_static/1758-2946-3-8-6.jpg
   :align: center

   Figure 6. Structure of the phenyl sulfone studied

   **Structure of the phenyl sulfone studied**.


Confab was used to generate a set of conformations of the molecule with a diversity of 0.2 \ |nonascii_62|\  and no energy cutoff. The resulting 2014 conformations were optimised using a MMFF94 forcefield (200 steps steepest descent; implemented using Pybel \ [#B30]_) and the final energy recorded. For each of the conformations the minimum distance between a sulfonyl oxygen and the methylene carbon was measured.

Figure \ :ref:`7<figure_7>` shows a plot of these distances versus the relative energies of the conformers with marginal histograms showing the distribution of values. The methylene carbon does not approach the sulfonyl group very closely. For low energy conformers, the distances are clustered around 4.0 \ |nonascii_63|\  and 5.4 \ |nonascii_64|\  with the former more frequent. Taking 5 kcal/mol as a cutoff, the distance can be as low as 3.7 \ |nonascii_65|\  but shorter distances (down to 3.0 \ |nonascii_66|\ ) are only possible with an associated energy penalty. Figure \ :ref:`6<figure_6>` shows one of the low energy conformations (relative energy of 4.6 kcal/mol) which has a distance of 3.7 \ |nonascii_67|\  between the groups of interest.

.. _figure_7:

.. figure:: ../_static/1758-2946-3-8-7.jpg
   :align: center

   Figure 7. Scatterplot with marginal histograms of distance versus energy for the set of conformations of the phenyl sulfone in Figure 6

   **Scatterplot with marginal histograms of distance versus energy for the set of conformations of the phenyl sulfone in Figure 6**.


Conclusion
**********

The goal of this first release of Confab is to ensure complete coverage of all of the low energy conformers of a molecule. While every effort is made to maximise performance, accuracy has been the main goal. Approximations that reduce the search space on the basis of heuristics have been avoided for this reason.

Using the results from Confab 1.0 as a comparison, future work will investigate strategies to to overcome the combinatorial explosion associated with large numbers of rotatable bonds \ [#B31]_ including the trade-off between speed and accuracy.

Availability and Requirements
*****************************

**Project name:** Confab

**Project home page:** `<http://confab.googlecode.com>`_

**Operating system(s):** Cross-platform

**Programming language:** C++

**Other requirements (if compiling):** CMake 2.4+, Eigen2

**Licence:** GPL v2

**Any restrictions to use by non-academics:** None

Authors' contributions
**********************

NMOB devised and implemented Confab, and carried out the coverage analysis. GRH implemented the conformer generation framework in Open Babel and contributed to the forcefield code. TV implemented the automorphism code in Open Babel and contributed to the forcefield code. NMOB collaborated with CJF and ARM on the sulfone investigation. All authors read and approved the final manuscript.

Acknowledgements and Funding
****************************

NMOB is supported by a Health Research Board Career Development Fellowship, PD/2009/13. We thank several beta testers for their valuable feedback, and the anonymous reviewers for their constructive comments.

.. [#B1]  Conformations and 3D pharmacophore searching

.. [#B2]  Comparison of Automatic Three-Dimensional Model Builders Using 639 X-Ray Structures

.. [#B3]  DG-AMMOS: A New tool to generate 3D conformation of small molecules using Distance Geometry and Automated Molecular Mechanics Optimization for in silico Screening

.. [#B4]  smi23d

.. [#B5]  Conformer Generation with OMEGA: Algorithm and Validation using High Quality Structures from the Protein Databank and Cambridge Structural Database

.. [#B6]  Impact of Conformational Flexibility on Three-Dimensional Similarity Searching Using Correlation Vectors

.. [#B7]  Catalyst

.. [#B8]  Confort

.. [#B9]  ConfGen: A Conformational Search Method for Efficient Generation of Bioactive Conformers

.. [#B10]  Generating Conformer Ensembles Using a Multiobjective Genetic Algorithm

.. [#B11]  MED-3DMC: A new tool to generate 3D conformation ensembles of small molecules with a Monte Carlo sampling of the conformational space

.. [#B12]  Frog2: Efficient 3D conformation ensemble generator for small compounds

.. [#B13]  MS-DOCK: Accurate multiple conformation generator and rigid docking protocol for multi-step virtual ligand screening

.. [#B14]  Automated flexible ligand docking method and its application for database search

.. [#B15]  Benchmarking Sets for Molecular Docking

.. [#B16]  Merck molecular force field. I. Basis, form, scope, parameterization, and performance of MMFF94

.. [#B17]  Rapid calculation of RMSDs using a quaternion-based characteristic polynomial

.. [#B18]  A solution for the best rotation to relate two sets of vectors

.. [#B19]  Open Babel, v2.3

.. [#B20]  GNU General Public License, v2

.. [#B21]  QCProt, v1.1

.. [#B22]  Eigen, v2.0.15

.. [#B23]  tree.hh, v2.65

.. [#B24]  Linear feedback shift register

.. [#B25]  Efficient Shift Registers, LFSR Counters, and Long Pseudo-Random Sequence Generators

.. [#B26]  Assessment of Conformational Ensemble Sizes Necessary for Specific Resolutions of Coverage of Conformational Space

.. [#B27]  Analysis of Conformational Coverage. 1. Validation and Estimation of Coverage

.. [#B28]  A new force field for molecular mechanical simulation of nucleic acids and proteins

.. [#B29]  An all atom force field for simulations of proteins and nucleic acids

.. [#B30]  Pybel: a Python wrapper for the OpenBabel cheminformatics toolkit

.. [#B31]  Systematic search in conformational analysis

.. |nonascii_1| unicode:: 0xc5
.. |nonascii_2| unicode:: 0xc5
.. |nonascii_3| unicode:: 0xb0
.. |nonascii_4| unicode:: 0xb0
.. |nonascii_5| unicode:: 0xb0
.. |nonascii_6| unicode:: 0xc5
.. |nonascii_7| unicode:: 0xc5
.. |nonascii_8| unicode:: 0xc5
.. |nonascii_9| unicode:: 0xc5
.. |nonascii_10| unicode:: 0xc5
.. |nonascii_11| unicode:: 0xc5
.. |nonascii_12| unicode:: 0xc5
.. |nonascii_13| unicode:: 0xc5
.. |nonascii_14| unicode:: 0xc5
.. |nonascii_15| unicode:: 0xb0
.. |nonascii_16| unicode:: 0xc5
.. |nonascii_17| unicode:: 0xc5
.. |nonascii_18| unicode:: 0xc5
.. |nonascii_19| unicode:: 0xc5
.. |nonascii_20| unicode:: 0xc5
.. |nonascii_21| unicode:: 0xc5
.. |nonascii_22| unicode:: 0xc5
.. |nonascii_23| unicode:: 0xc5
.. |nonascii_24| unicode:: 0xc5
.. |nonascii_25| unicode:: 0xc5
.. |nonascii_26| unicode:: 0xc5
.. |nonascii_27| unicode:: 0xc5
.. |nonascii_28| unicode:: 0xc5
.. |nonascii_29| unicode:: 0xc5
.. |nonascii_30| unicode:: 0xc5
.. |nonascii_31| unicode:: 0xc5
.. |nonascii_32| unicode:: 0xc5
.. |nonascii_33| unicode:: 0xc5
.. |nonascii_34| unicode:: 0xc5
.. |nonascii_35| unicode:: 0xc5
.. |nonascii_36| unicode:: 0xb0
.. |nonascii_37| unicode:: 0xb0
.. |nonascii_38| unicode:: 0xc5
.. |nonascii_39| unicode:: 0xc5
.. |nonascii_40| unicode:: 0xc5
.. |nonascii_41| unicode:: 0xc5
.. |nonascii_42| unicode:: 0xc5
.. |nonascii_43| unicode:: 0xc5
.. |nonascii_44| unicode:: 0xc5
.. |nonascii_45| unicode:: 0xc5
.. |nonascii_46| unicode:: 0xc5
.. |nonascii_47| unicode:: 0xc5
.. |nonascii_48| unicode:: 0xc5
.. |nonascii_49| unicode:: 0xc5
.. |nonascii_50| unicode:: 0xc5
.. |nonascii_51| unicode:: 0xc5
.. |nonascii_52| unicode:: 0xc5
.. |nonascii_53| unicode:: 0xc5
.. |nonascii_54| unicode:: 0xc5
.. |nonascii_55| unicode:: 0xc5
.. |nonascii_56| unicode:: 0xc5
.. |nonascii_57| unicode:: 0xc5
.. |nonascii_58| unicode:: 0xc5
.. |nonascii_59| unicode:: 0xc5
.. |nonascii_60| unicode:: 0xc5
.. |nonascii_61| unicode:: 0xc5
.. |nonascii_62| unicode:: 0xc5
.. |nonascii_63| unicode:: 0xc5
.. |nonascii_64| unicode:: 0xc5
.. |nonascii_65| unicode:: 0xc5
.. |nonascii_66| unicode:: 0xc5
.. |nonascii_67| unicode:: 0xc5

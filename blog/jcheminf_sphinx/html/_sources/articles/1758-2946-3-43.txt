The semantics of Chemical Markup Language (CML): dictionaries and conventions
=============================================================================

Abstract
********

The semantic architecture of CML consists of conventions, dictionaries and units. The conventions conform to a top-level specification and each convention can constrain compliant documents through machine-processing (validation). Dictionaries conform to a dictionary specification which also imposes machine validation on the dictionaries. Each dictionary can also be used to validate data in a CML document, and provide human-readable descriptions. An additional set of conventions and dictionaries are used to support scientific units. All conventions, dictionaries and dictionary elements are identifiable and addressable through unique URIs.

Introduction
************

From an early stage, Chemical Markup Language (CML) was designed so that it could accommodate an indefinitely large amount of chemical and related concepts. This objective has been achieved by developing a dictionary mechanism where many of the semantics are added not through hard-coded elements and attributes but by linking to semantic dictionaries. CML has a number of objects and object containers which are abstract and which can be used to represent the structure and datatype of objects. The meaning of these, both for humans and machines, is then realised by linking an appropriate element in a dictionary.

The dictionary approach was inspired by the CIF dictionaries \ [#B1]_ from the International Union of Crystallography (IUCr) and has a similar (in many places isomorphous) structure to that project. The design allows for an indefinitely large number of dictionaries created by communities within chemistry who recognise a common semantic approach and who are prepared to create the appropriate dictionaries. At an early stage, CML provided for this with the concept of "convention". This attribute is an indication that the current element and its descendants obey semantics defined by a group of scientists using a particularly unique label (Figure \ :ref:`1<figure_1>`).

.. _figure_1:

.. figure:: ../_static/1758-2946-3-43-1.jpg
   :align: center

   Figure 1. The primary semantic components of CML

   **The primary semantic components of CML**. Elements in a document link to conventions, dictionaries and units through attributes. The referenced resources are themselves constrained by specification documents (convention spec, dictionary spec, system of units) with unique URIs. Within the dictionaries and the unit collections, every entry has a unique ID and when combined with the dictionary URI produces a globally-unique identifier.


During the evolution of CML we explored a number of syntactic approaches to representing and imposing semantics through dictionaries. These have ranged from a formally controlled ontology (ChemAxiom \ [#B2]_) which is consistent with OWL2.0 \ [#B3]_ and the biosciences' Open Biological and Biomedical Ontologies (OBO)\ [#B4]_ framework, to uncontrolled folksonomy-like tagging. Although we have implemented ChemAxiom and it is part of the bioscientists' description of chemistry, we regard it as too challenging for the current practice of chemistry and unnecessary for its communication. This is because chemistry has a well-understood (albeit implicit) ontology and the last 15 years have confirmed that it is highly stable. The power of declaration logic is therefore not required in building semantic structures. The consequence is that some of the mechanics of the semantics must be hard-coded, but this is a relatively small part and primarily consists of the linking mechanism and the treatment of scientific units of measurement. At the other end of the spectrum, we have found that the folksonomy approach is difficult to control without at least some formal semantic labelling. We have also found that there is considerable variation in how sub-communities approach their subject, and we do not wish to be prescriptive (even if we could). For example, the computational solids group (CMLComp) insisted that a molecule should not contain bonds as they did not exist, whereas the chemical informatics community is concerned not only that bonds should exist but that they should be annotated with their formal bond order.

The design of CML has always been based on the need for dictionaries, and has also recognised that there are different conventions within chemical practice. The original design (Figure \ :ref:`2<figure_2>`) shows the linked dictionary concept and this has proved resilient and is the basis of the current architecture. However, the precise representation has varied over the years. This article represents a convergence and crystallisation of the semantic environment of CML, and we believe that there are now no immediate requirements for early refinement. This paper can therefore be used, we hope, for several years as a reference in a more robust manner than has been possible up to now. However, the exact practice of the CML community will be primarily governed by public discussions on mailing lists and formal releases of software and specifications.

.. _figure_2:

.. figure:: ../_static/1758-2946-3-43-2.jpg
   :align: center

   Figure 2. The original design for CML semantic architecture (1996)

   **The original design for CML semantic architecture (1996)**. This shows how different groups can create their own semantics and inter-operate. The concept has been proven over 15 years with appropriate changes to the terminology (*i.e*. we now talk of linked metadata rather than a hyperglossary).


This practice and principles are general to all the semantic elements in this article, and is best illustrated in the requirements for creating a convention and enforcing it. In the spirit of communal development, any sub-community is at liberty to create their own convention without formal permission from any central governance, subject to the requirement that it must be valid against the (very flexible) CML Schema 3 \ [#B5]_. This is done by associating the convention with a unique namespace identifier and the convention specification shows how this must be done, but does not dictate the contents or scope of any convention. In this way, an indefinite number of sub-communities can develop and 'do their own thing' without breaking the CML semantics. The success of a convention is then a social, not technical, phenomenon. If group A develops a convention and groups B, C and D adopt it then there is wide interoperability. If A develops a convention and B develops an alternative then there is fragmentation. It's not always a bad thing to have "more than one way to do it"\ [#B6]_, but it can it make life very complex for software developers.

The price for this freedom is that a community cannot by default expect other users of CML to adopt their convention. If a community wishes its convention to be used, it needs to educate it in how CML can support it, and almost always to create or re-use software to support the convention. Thus, for example, the CMLSpect convention is supported by the JSpecView \ [#B7]_ software, which has a vigorous community of practice. Similarly, the CMLCryst convention (not yet released) is being driven by the development of the CrystalEye \ [#B8]_ knowledgebase and its adoption by the IUCr.

The dictionary reference mechanism (the *i.e*. it has a prefix as well as a local name. Although this approach is not formally supported by XML, it is widespread in approaches such as XSD Schema. This has turned out to be a valuable design as it is isomorphic to the use of namespaced URIs and indeed the \ [#B9]_ and that both the namespace and the local entry should be resolvable.

The role attribute has been used for a variety of purposes in the past but is now developed as a general "tagging" tool. A typical example is shown in the 'Roles' section below.

The semantic tools (dictionary, convention and role) have been fluid over the last decade and there are examples where their use is not compatible with this paper. However, the tools to support them will work with modern CML libraries.

The current tools in CML for adding semantics are therefore:

\ |nonascii_1|\  **convention**

\ |nonascii_2|\  **dictRef**

\ |nonascii_3|\  **role**

\ |nonascii_4|\  **units****and** **unitType**

We now discuss each of these approaches in detail.

Semantic Elements of CML
************************

Convention
^^^^^^^^^^

The initial (1996) use of convention was limited to certain elements such as bond to represent the different values that different communities might use. It has now grown to be a key concept in defining communities of practice, having started to be used *ca*. 2005 when individuals and groups worked to create sub-domains of CML. The leading areas were reactions (mainly enzymes), spectroscopy, crystallography and computational chemistry (compchem). It emerged from these exercises that the elements and attributes of CML were sufficient to support the sub-community but that additional semantics in their use and constraints was necessary. Thus, for example, the CMLSpect \ [#B10]_ community decided that a spectrum must have a child representing the data in the spectrum (it is still possible to have an empty spectrum in CML but it would be used by a different community for a different purpose).

Conventions specify a minimal set of elements and document structure that a community has agreed to. Other elements may be included in a document, but may be transparently ignored by processing software.

Thus, a convention offers the following:

\ |nonascii_5|\  an announcement that an identified community cares about a sub-domain of chemistry.

\ |nonascii_6|\  a prose description of the scope and constraints and practice of the convention.

\ |nonascii_7|\  a validator \ [#B11]_ that determines whether a given document conforms to a convention (and where it deviates).

In addition for software developers it offers:

\ |nonascii_8|\  a statement as to what the components in a convention are, and how they can be combined.

\ |nonascii_9|\  indications of what constraints may/must/should be imposed on CML documents valid against this convention.

\ |nonascii_10|\  an indication or a guarantee as to what CML components may be found in a conformant document.

\ |nonascii_11|\  an indication of their semantics.

CML Schema 3 is less restrictive than Schema 2.4 \ [#B12]_ and is designed to be used in conjunction with conventions. The loosening of the restrictions in the schema mean that it is schema-valid to create documents which do not make chemical sense (such as molecules being the children of atoms and bonds being defined in a molecule with no atoms present). The chemical validity and constraints are now imposed through the use of conventions and XSLT/XPath. `<http://www.ietf.org/rfc/rfc2119.txt>`_) be a convention document describing a convention.

Currently supported conventions (see Figure \ :ref:`1<figure_1>`) are:

\ |nonascii_12|\  `<http://www.xml-cml.org/convention/dictionary>`_).

\ |nonascii_13|\  `<http://www.xml-cml.org/convention/molecular>`_).

\ |nonascii_14|\  `<http://www.xml-cml.org/convention/compchem>`_).

\ |nonascii_15|\  `<http://www.xml-cml.org/convention/unit-dictionary>`_).

\ |nonascii_16|\  `<http://www.xml-cml.org/convention/unitType-dictionary>`_).

Examples of constraints implemented in the 

\ |nonascii_17|\  an 

\ |nonascii_18|\  the value of an 

\ |nonascii_19|\  a 

\ |nonascii_20|\  a 

Dictionaries
^^^^^^^^^^^^

In a similar way, a dictionary ecology \ [#B13]_ has developed supporting an extensible set of concepts in CML documents. The dictionaries add semantics to the CML primitives, particularly *e.g*. melting point) and common metadata such as users and dates. Conventions will almost certainly have one or more dictionaries so that compchem has an extended dictionary of concepts such as convergent limits, energies, gradients and so forth. The MACiE \ [#B14]_ dictionary used the IUPAC Gold Book \ [#B15]_ to define terms in reactions and the Atmospheric Chemistry dictionary is again taken from IUPAC \ [#B16]_.

One important way of creating dictionaries is to extract terms and discourse from CML documents. A particular example is the markup of concepts created in computational chemistry and here we often associate a given program or code with a dictionary specific to that program/code. Thus, for example, a program/code might use a set of keywords found nowhere else; currently around six such dictionaries exist, and the number is increasing. In these cases we often find the need for a hierarchy so that a code might use code-specific dictionary terms in addition to those in the general computational chemistry dictionary. Different programs sometimes produce data with the same label but a different interpretation; does "*density"* mean electron density or mass density? There can be any number of dictionaries (and we envisage one for each code, or ideally fewer). Each dictionary has a unique namespace so there are no collisions. The entries can be minimal (id, term, definition, *etc*.) but will usually indicate the data structure (

Applying 



might specify that this *e.g*. `<http://www.ietf.org/rfc/rfc2119.txt>`_) be a dictionary 

Example (from `<http://www.xml-cml.org/convention/dictionary>`_):



`<http://www.xml-cml.org/schema>`_"

`<http://www.xml-cml.org/convention/>`_"

`<http://www.xml-cml.org/unit/nonSi/>`_"

`<http://www.xml-cml.org/unit/unitType/>`_"

`<http://www.w3.org/1999/xhtml>`_"

`<http://www.w3.org/2001/XMLSchema>`_"





`<http://www.xml-cml.org/dictionary/dummy/>`_"









































































Roles
^^^^^

A third approach to semantics is driven by the need to 'tag' information, and for this we provide the role attribute. Roles are less formalised than *ad hoc* semantics. They may, of course, link to formal semantic documents if required, though this cannot be enforced except by convention.

*i.e*. part of a folksonomy, while in other cases 

Example showing how role is used in the definition of a fragment within a polymer \ [#B17]_:

<?xml version = "1.0" encoding = "UTF-8"?>

<fragment id = "cl_nsp2_methyl" convention = "cml:PML-complete" xmlns = "`<http://www.xml-cml.org/schema>`_" xmlns:g = "`<http://www.xml-cml.org/mols/geom1>`_">

<molecule role = "fragment" id = "benzene_1">

<atomArray>

<atom elementType = "C" x3 = "9.526706134000763" y3 = "3.869733600000001" z3 = "5.213518402229052" id = "benzene_1_a1">

<label dictRef = "cml:torsionEnd"> r6 </label>

</atom>

<atom elementType = "C" x3 = "10.243299413197152" y3 = "3.932398500000001" z3 = "6.439022942911609" id = "benzene_1_a2">

<label dictRef = "cml:torsionEnd"> r1 </label>

</atom>

<atom elementType = "C" x3 = "8.713504556428543" y3 = "2.7185301000000006" z3 = "5.01720505576243" id = "benzene_1_a6">

<label dictRef = "cml:torsionEnd"> r5 </label>

</atom>

<atom elementType = "R" x3 = "8.385888936961882" y3 = "2.655387420737078" z3 = "4.323244676535362" id = "benzene_1_r6"/>

<atom elementType = "C" x3 = "10.119474056141831" y3 = "2.9008920000000007" z3 = "7.3834992125284815" id = "benzene_1_a3">

<label dictRef = "cml:torsionEnd"> r2 </label>

<label dictRef = "cml:torsionEnd"> r2 </label>

<label dictRef = "cml:torsionEnd"> r3 </label>

</atom>

<atom elementType = "C" x3 = "9.320371405363035" y3 = "1.8151698000000005" z3 = "7.151684115065878" id = "benzene_1_a4">

<label dictRef = "cml:torsionEnd"> r3 </label>

</atom>

<atom elementType = "R" x3 = "9.280916015724046" y3 = "1.2657016684721403" z3 = "7.6896692864820775" id = "benzene_1_r4"/>

<atom elementType = "C" x3 = "8.610030693701125" y3 = "1.7243409000000007" z3 = "5.934289686115539" id = "benzene_1_a5">

<label dictRef = "cml:torsionEnd"> r4 </label>

</atom>

<atom elementType = "R" x3 = "10.697234803620145" y3 = "4.543958438540135" z3 = "6.552323882423661" id = "benzene_1_r2"/>

<atom elementType = "Cl" formalCharge = "0" hydrogenCount = "0" id = "cl_2_a1" x3 = "9.692011995771473" y3 = "5.151468187879777" z3 = "4.018767207085518"/>

<atom elementType = "N" formalCharge = "0" hydrogenCount = "0" id = "nsp2_3_n1" x3 = "10.889175042006798" y3 = "2.9930090553818314" z3 = "8.690968080404991"/>

<atom elementType = "R" formalCharge = "0" hydrogenCount = "0" id = "nsp2_3_r3" x3 = "10.937618525919527" y3 = "3.6140787328234207" z3 = "9.108611091395234"> </atom>

<atom elementType = "R" formalCharge = "0" hydrogenCount = "0" id = "nsp2_3_r2" x3 = "11.21097670608745" y3 = "2.3333885683637092" z3 = "8.845384731388283">

<label dictRef = "cml:torsionEnd"> r1 </label>

</atom>

<atom elementType = "C" id = "me_4_a1" x3 = "7.720415546204135" y3 = "0.5004327093517826" z3 = "5.6475256189660525"/>

<atom elementType = "H" id = "me_4_a6" x3 = "7.8973212132921615" y3 = "0.15287314794224827" z3 = "4.629221766363621">

<label dictRef = "cml:torsionEnd"> r1 </label>

</atom>

<atom elementType = "H" id = "me_4_a7" x3 = "7.962448186970064" y3 = "-0.2976542125451189" z3 = "6.350030754819878"/>

<atom elementType = "H" id = "me_4_a8" x3 = "6.673285676722817" y3 = "0.7788619666709824" z3 = "5.760051994135236"/>

</atomArray>

<bondArray>

<bond order = "2" id = "benzene_1_a1_benzene_1_a2" atomRefs2 = "benzene_1_a1 benzene_1_a2"/>

<bond order = "1" id = "benzene_1_a1_benzene_1_a6" atomRefs2 = "benzene_1_a1 benzene_1_a6"/>

<bond order = "1" id = "benzene_1_a3_benzene_1_a2" atomRefs2 = "benzene_1_a3 benzene_1_a2"/>

<bond order = "1" id = "benzene_1_a2_benzene_1_r2" atomRefs2 = "benzene_1_a2 benzene_1_r2"/>

<bond order = "1" id = "benzene_1_r6_benzene_1_a6" atomRefs2 = "benzene_1_r6 benzene_1_a6"/>

<bond order = "2" id = "benzene_1_a5_benzene_1_a6" atomRefs2 = "benzene_1_a5 benzene_1_a6"/>

<bond order = "2" id = "benzene_1_a3_benzene_1_a4" atomRefs2 = "benzene_1_a3 benzene_1_a4"/>

<bond order = "1" id = "benzene_1_a5_benzene_1_a4" atomRefs2 = "benzene_1_a5 benzene_1_a4"/>

<bond order = "1" id = "benzene_1_a4_benzene_1_r4" atomRefs2 = "benzene_1_a4 benzene_1_r4"/>

<bond atomRefs2 = "benzene_1_a1 cl_2_a1" order = "S" id = "benzene_1_a1_cl_2_a1"/>

<bond order = "S" atomRefs2 = "nsp2_3_n1 nsp2_3_r2" id = "nsp2_3_n1_nsp2_3_r2"/>

<bond order = "S" atomRefs2 = "nsp2_3_n1 nsp2_3_r3" id = "nsp2_3_n1_nsp2_3_r3"/>

<bond atomRefs2 = "benzene_1_a3 nsp2_3_n1" order = "S" id = "benzene_1_a3_nsp2_3_n1"/>

<bond order = "1" atomRefs2 = "me_4_a1 me_4_a6" id = "me_4_a1_me_4_a6"/>

<bond order = "1" atomRefs2 = "me_4_a1 me_4_a7" id = "me_4_a1_me_4_a7"/>

<bond order = "1" atomRefs2 = "me_4_a1 me_4_a8" id = "me_4_a1_me_4_a8"/>

<bond atomRefs2 = "benzene_1_a5 me_4_a1" order = "S" id = "benzene_1_a5_me_4_a1"/>

</bondArray>

</molecule>

</fragment>

Units
^^^^^

The final component of the semantic framework is scientific units of measurement. In these we specify the type of the unit (\ [#B18]_. Every 

These "essentials" are adapted from NIST Special Publication 811 (SP 811)\ [#B19]_ and NIST Special Publication 330 (SP 330)\ [#B20]_. We use the terminology from NIST, with some variation, and quote verbatim to avoid confusion:

*quantity in the general sense "A* 

CML uses the term "

*quantity in the particular sense "A* 

CML does not currently use this concept explicitly. Quantities are usually either parameters or properties (but not all parameters and properties (*e.g*. string values) map to quantities).

*physical quantity "A* 

CML honours this concept in that 

*"A unit is a particular physical quantity, defined and adopted by convention, with which other particular quantities of the same kind are compared to express their value."*

CML maps onto this concept through the 

*value of a physical quantity "The* 

CML supports this in the 

CML will honour specifications of \ [#B21]_ has been many years in incubation but now seems to be close to production release. CML will continue to use its own semantics for units but may also include interoperability with NIST.

The CML system of units goes somewhat beyond NIST in that it is not limited to physical science and has to support concepts such as mg (drug)/kg (animal) where the semantics of the experiment have to be linked (this is not a simple dimensionless number - "drug" and "animal" do not cancel). CML units allow for dimensions and other concepts to be associated with "dimensionless", such as ppm). CML software (JUMBO \ [#B22]_) allows for the values and units to be recomputed ("unit conversion") and for simple dimensional analysis. Entries in 

Users can create their own *e.g*. "The optimum dose of rIL2 was 100-500 units (Jurkat units)/ml, "\ [#B23]_) which do not fit easily into the seven primary SI concepts, but are still critical attributes of the experiment. The general structure of the dictionaries is likely to be:

\ |nonascii_21|\  A single, community-driven and maintained dictionary for *e.g*. fifth virial coefficient units), we see this being gradually and carefully extended.

\ |nonascii_22|\  A number of local *e.g*. Jurkats).

\ |nonascii_23|\  A single dictionary for SI \ [#B24]_ (paralleling the 

\ |nonascii_24|\  A small number of core dictionaries for \ [#B25]_ (*e.g*. CGS, atomic units, *etc*.).

\ |nonascii_25|\  A larger number of convention-specific 

Creating dictionaries
*********************

The biosciences have several approaches for creating ontologies, such as the Gene Ontology (GO)\ [#B26]_. GO was designed as a thesaurus to which individuals and groups could contribute. It has a directed acyclic graph (DAG) structure, where an entry can have several parents and several children. The hierarchy honours the broader/narrower term approach and used three axes (cellular component, molecular function, biological process) but is designed primarily for human navigability rather than machine computability. It and other dictionaries have been transformed to fuller OWL-compliant ontologies using the file format guide provided \ [#B27]_.

We use the following approaches for creating dictionaries:

**\ |nonascii_26|\  Borrow from established dictionaries** (IUPAC, IUCr, Wikipedia) and convert to CML. The main challenge is that many of the terms are broad concepts and follow human rather than machine conventions. This approach was used for the MaCiE dictionary with terms borrowed from IUPAC where possible and with a hierarchy expressed in CML. We have also translated the IUCr's CIF dictionary into CML format \ [#B28]_, and this is used in, for example, the CrystalEye system.

**\ |nonascii_27|\  Observe and collect discourse/practice**, both in program input/output and formulaic text. We create or collect a corpus of documents and extract the common terms. Assuming that they are associated with 

These processes lead to a community of dictionaries, with an implied but not necessarily explicit hierarchy.

Detailed use cases of dictionary construction
*********************************************

\ |nonascii_28|\ With the ChemicalTagger \ [#B29]_ system, we have built a natural language framework which recognises parts of speech and phrase. With over 100, 000 patents analysed we have a large corpus representing the current usage in describing chemical synthesis. The automatic analysis \ [#B30]_ of this corpus throws up a variety of abstractions common to many of the texts, in particular for the actions and methods used to describe chemical syntheses. Currently we have extracted 21 types of action phrase from this corpus:



Coupled with these phrases are qualifiers (sometimes English language adverbs) and specific uses of nouns which can be additionally used to label a text. This is an example of a small natural language driven dictionary into which a large number of specific terms can be entered.

\ |nonascii_29|\ In the Quixote project \ [#B31]_\ [#B32]_ we are creating a semantic infrastructure for compchem. Unlike crystallography, where the community has for many years sat in real and virtual committee to decide on dictionaries and their contents, compchem has very little common practice in this area. There is no commonality of approach to labelling either the input or output of compchem calculations. Our belief is that there is a strong implicit similarity, even isomorphism, between the main computational codes, and that by analysing the discourse (*i.e*. the logfiles), we can collect and systematise the types of object referenced in the logfiles. To do this, we have taken a number of codes (Gaussian \ [#B33]_ (various versions), GAMESS-UK \ [#B34]_, Jaguar \ [#B35]_, NWChem \ [#B36]_, Quantum ESPRESSO \ [#B37]_) and analysed much of their logfile structure and vocabulary. Although the level of detail varies between programs, there are somewhere between 100-500 concepts in total which can be precisely labelled and which could contribute to a communal dictionary. We are in the process of building a table (spreadsheet) of the terms which occur in codes and their occurrence (or absence) in each code. These normally occur as CML parameters. The concepts currently cover the following areas:

\ |nonascii_30|\ Environment of the calculation. This includes machine configurations, version of code, time constraints, human and institutional metadata and other control parameters.

\ |nonascii_31|\ The method of calculation *e.g*. the functional.

\ |nonascii_32|\ The basis set or pseudo-potential.

\ |nonascii_33|\ Any physical constraints imposed on the system (*e.g*. pressure, temperature or electric field).

\ |nonascii_34|\ Levels of accuracy or cut-off desired in the calculation.

\ |nonascii_35|\ Strategy of calculation and algorithms used (*e.g*. search for a transition state, reaction coordinates, frequencies *etc*.).

The output files normally deal with outcomes of running the job (*e.g*. abnormal termination, level of convergence achieved, elapsed time) and calculated properties.

Most of these concepts are common to all codes and where possible we are creating entries in a single common compchem dictionary \ [#B38]_ (Figure \ :ref:`3<figure_3>`). In some cases, however, methods and properties are unique to one code, and many of the intricate details in the logfiles are not directly transferable. For that reason, we are using a hierarchy of dictionaries with the following components:

.. _figure_3:

.. figure:: ../_static/1758-2946-3-43-3.jpg
   :align: center

   Figure 3. A compchem-compliant document read into the Avogadro browser and computational chemistry manager

   **A compchem-compliant document read into the Avogadro** \ [#B39]_**browser and computational chemistry manager**. The structure of the document is shown with the primary subdivisions. Each piece of information is in a precisely specified position in the hierarchy, so that it may easily be discovered by processing software. For example the 


1. A dictionary common to all or most of computational chemistry (compchem dictionary).

2. A series of dictionaries, one per code, which is initially used to collect defined quantities in the output. At regular stages the community will decide whether these map onto concepts in the main compchem dictionary, and, in those cases, transfer their usage to that dictionary.

Software support for dictionaries and units
*******************************************

Besides the markup support for dictionaries and units, they are only really useful in chemistry if they are supported by a software system. Some of this can be provided by Web 2.0 tools such as RDF which can be used to lookup whether referenced units are present in appropriate dictionaries. However, it is often important to carry out manipulations on units such as conversion between different systems and multiplier prefixes. For that reason we have developed a suite of software within the JUMBO system for these manipulations.

The following elements are established in CML:

\ |nonascii_36|\  Dictionary.

\ |nonascii_37|\  Entry.

\ |nonascii_38|\  Unit type (and unit type list.)

\ |nonascii_39|\  Unit (in unit list).

In our recent work with dictionaries (especially in computational chemistry) we use the entries to provide some of the semantics to be applied at "run-time". For example, a dictionary entry may define a syntactic template for the concept, or an enumeration of allowed values. In using the CIF dictionary, the data type (

Conclusion
**********

The use of conventions and dictionaries has proved of enormous value in the development and robustification of CML. With well-defined protocols, groups can take the formal specifications and build their own systems such that they not only do what they want, but do not break other CML software. We are currently working actively on computational chemistry and, with a wide range of different codes and types of problem, we expect to be able to show that the current architecture is capable of supporting these.

Assuming that semantic computational chemistry becomes widespread, the dictionaries will act as a catalyst to those communities to add more terms and to revise the precise usage of the concepts. It will also act as a demonstration to other areas of chemistry of the value of the convention/dictionary approach.

Competing interests
*******************

The authors declare that they have no competing interests.

Authors' contributions
**********************

PMR designed dictionaries and their schemas, and wrote the manuscript. JAT implemented conventions and the validator, and wrote the manuscript. SEA built supporting software, and wrote the manuscript. WP implemented conventions and dictionaries. JT designed compchem dictionaries. All authors have read and approved the final manuscript.

.. [#B1]  IUCr CIF dictionaries

.. [#B2]  ChemAxiom - An Ontological Framework for Chemistry in Science

.. [#B3]  OWL 2 Web Ontology Language

.. [#B4]  Open Biological and Biomedical Ontologies (OBO)

.. [#B5]  CMl Schema 3

.. [#B6]  "There's more than one way to do it", Perl motto

.. [#B7]  JSpecView software

.. [#B8]  CrystalEye

.. [#B9]  Namespaces in XML, QName

.. [#B10]  Chemical markup, XML, and the world wide web. 7. CMLSpect, an XML vocabulary for spectral data

.. [#B11]  CML validators

.. [#B12]  CML Schema 2.4

.. [#B13]  CML dictionary ecology

.. [#B14]  MACiE: a database of enzyme reaction mechanisms

.. [#B15]  IUPAC Compendium of Chemical Terminology - the Gold Book

.. [#B16]  IUPAC Project: Glossary of atmospheric chemistry

.. [#B17]  Chemical Markup, XML and the World-Wide Web. 8. Polymer Markup Language

.. [#B18]  CML unitType dictionary

.. [#B19]  Guide for the Use of the International System of Units (SI)

.. [#B20]  The International System of Units (SI)

.. [#B21]  Units markup language (UnitsML)

.. [#B22]  JUMBO

.. [#B23]  Antitumor effects of interleukin 2 against renal cell carcinoma: basic study and clinical application

.. [#B24]  CML SI units dictionary

.. [#B25]  CML non-SI units dictionary

.. [#B26]  The Gene Ontology, GO

.. [#B27]  GO file format guide

.. [#B28]  CML CIF dictionary

.. [#B29]  ChemicalTagger: A tool for Semantic Text-mining in Chemistry

.. [#B30]  Mining chemical information from Open patents

.. [#B31]  Quixote project on QC databases

.. [#B32]  The Quixote project: Collaborative and Open Quantum Chemistry data management in the Internet age

.. [#B33]  Official Gaussian website

.. [#B34]  GAMESS-UK software

.. [#B35]  Jaguar software, Schr\ |nonascii_40|\ dinger Inc

.. [#B36]  NWChem software

.. [#B37]  Quantum ESPRESSO software

.. [#B38]  CML compchem dictionary

.. [#B39]  Avogadro software

.. |nonascii_1| unicode:: 0x2022
.. |nonascii_2| unicode:: 0x2022
.. |nonascii_3| unicode:: 0x2022
.. |nonascii_4| unicode:: 0x2022
.. |nonascii_5| unicode:: 0x2022
.. |nonascii_6| unicode:: 0x2022
.. |nonascii_7| unicode:: 0x2022
.. |nonascii_8| unicode:: 0x2022
.. |nonascii_9| unicode:: 0x2022
.. |nonascii_10| unicode:: 0x2022
.. |nonascii_11| unicode:: 0x2022
.. |nonascii_12| unicode:: 0x2022
.. |nonascii_13| unicode:: 0x2022
.. |nonascii_14| unicode:: 0x2022
.. |nonascii_15| unicode:: 0x2022
.. |nonascii_16| unicode:: 0x2022
.. |nonascii_17| unicode:: 0x2022
.. |nonascii_18| unicode:: 0x2022
.. |nonascii_19| unicode:: 0x2022
.. |nonascii_20| unicode:: 0x2022
.. |nonascii_21| unicode:: 0x2022
.. |nonascii_22| unicode:: 0x2022
.. |nonascii_23| unicode:: 0x2022
.. |nonascii_24| unicode:: 0x2022
.. |nonascii_25| unicode:: 0x2022
.. |nonascii_26| unicode:: 0x2022
.. |nonascii_27| unicode:: 0x2022
.. |nonascii_28| unicode:: 0x2022
.. |nonascii_29| unicode:: 0x2022
.. |nonascii_30| unicode:: 0x25a0
.. |nonascii_31| unicode:: 0x25a0
.. |nonascii_32| unicode:: 0x25a0
.. |nonascii_33| unicode:: 0x25a0
.. |nonascii_34| unicode:: 0x25a0
.. |nonascii_35| unicode:: 0x25a0
.. |nonascii_36| unicode:: 0x2022
.. |nonascii_37| unicode:: 0x2022
.. |nonascii_38| unicode:: 0x2022
.. |nonascii_39| unicode:: 0x2022
.. |nonascii_40| unicode:: 0xf6
